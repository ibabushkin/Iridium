
=== 0 0 9 ===
sub_401FF0 proc near
var_8= dword ptr -8
var_4= dword ptr -4
arg_0= dword ptr  4
sub esp, 8
mov [esp+8+var_8], 400000h
call sub_401EF0
mov edx, eax
xor eax, eax


=== 1 9 11 ===
test edx, edx
jz short loc_402020


=== 2 11 16 ===
mov eax, [esp+8+arg_0]
mov [esp+8+var_8], 400000h
sub eax, 400000h
mov [esp+8+var_4], eax
call sub_401F20


=== 3 16 20 ===
loc_402020:
add esp, 8
retn 
sub_401FF0 endp

0-1
1-3
1-2
2-3
==================
Analyzer is reducing graph ...
Postorder of dfs-tree: [3, 2, 1, 0]
==================
analyzing node 3 ...
target of backedge  ... False
branching ... False
found simple structure.
block: [3]
found nothing, block is singular.
==================
analyzing node 2 ...
target of backedge  ... False
branching ... False
found simple structure.
block: [2]
found nothing, block is singular.
==================
analyzing node 1 ...
target of backedge  ... False
branching ... True
found simple structure.
if-then: [1, 2]
reduction successful.
current nodeset: | 0 | 3 | 4 | 
current edgeset: | 0-4 | 4-3 | 
applying recursive analysis ...
==================
analyzing node 4 ...
target of backedge  ... False
branching ... False
found simple structure.
block: [3, 4]
appendable to 3 ... False
reduction successful.
current nodeset: | 0 | 5 | 
current edgeset: | 0-5 | 
applying recursive analysis ...
==================
analyzing node 5 ...
target of backedge  ... False
branching ... False
found simple structure.
block: [5]
found nothing, block is singular.
==================
analyzing node 0 ...
target of backedge  ... False
branching ... False
found simple structure.
block: [0, 5]
appendable to 5 ... True
appending to existing block ... done: 5
reduction successful.
current nodeset: | 5 | 
applying recursive analysis ...
==================
analyzing node 5 ...
target of backedge  ... False
branching ... False
found simple structure.
block: [5]
found nothing, block is singular.
==================RESULTS==================
Graph starting at node 5
id: 5 type: block starts at 0:
    |-- nodes:
    |   id: 0 type: low-level
    |   +--------------------------+
    |   |sub_401FF0 proc near      |
    |   |var_8= dword ptr -8       |
    |   |var_4= dword ptr -4       |
    |   |arg_0= dword ptr  4       |
    |   |sub esp, 8                |
    |   |mov [esp+8+var_8], 400000h|
    |   |call sub_401EF0           |
    |   |mov edx, eax              |
    |   |xor eax, eax              |
    |   +--------------------------+
    |   
    |   id: 4 type: if-then starts at 1:
    |       then:2 condition:1 
    |       |-- nodes:
    |       |   id: 1 type: low-level
    |       |   +-------------------+
    |       |   |test edx, edx      |
    |       |   |jz short loc_402020|
    |       |   +-------------------+
    |       |   
    |       |   id: 2 type: low-level
    |       |   +--------------------------+
    |       |   |mov eax, [esp+8+arg_0]    |
    |       |   |mov [esp+8+var_8], 400000h|
    |       |   |sub eax, 400000h          |
    |       |   |mov [esp+8+var_4], eax    |
    |       |   |call sub_401F20           |
    |       |   +--------------------------+
    |       |   
    |       |-- edges:
    |       |       1-2
    |       
    |   id: 3 type: low-level
    |   +---------------+
    |   |loc_402020:    |
    |   |add esp, 8     |
    |   |retn           |
    |   |sub_401FF0 endp|
    |   +---------------+
    |   
    |-- edges:
    |       4-3
    |       0-4
    
