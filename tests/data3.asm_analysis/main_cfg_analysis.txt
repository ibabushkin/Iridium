
=== 0 0 18 ===
main proc near
var_20= dword ptr -20h
var_1C= dword ptr -1Ch
var_C= dword ptr -0Ch
var_8= dword ptr -8
var_4= dword ptr -4
push ebp
mov ebp, esp
and esp, 0FFFFFFF0h
sub esp, 20
mov [esp+20h+var_8], 14h
mov eax, [esp+20h+var_8]
shl eax, 2
mov [esp+20h+var_20], eax
call _malloc
mov [esp+20h+var_C], eax
mov [esp+20h+var_4], 0
jmp short loc_80485C6


=== 1 18 26 ===
loc_80485AA at 18
mov eax, [esp+20h+var_4]
lea edx, ds:0[eax*4]
mov eax, [esp+20h+var_C]
add edx, eax
mov eax, [esp+20h+var_4]
mov [edx], eax
add [esp+20h+var_4], 1


=== 2 26 29 ===
loc_80485C6 at 26
cmp [esp+20h+var_4], 13h
jle short loc_80485AA


=== 3 29 40 ===
mov eax, [esp+20h+var_4]
mov [esp+20h+var_1C], eax
mov [esp+20h+var_20], offset unk_80486DC
call _printf
mov eax, [esp+20h+var_C]
mov [esp+20h+var_20], eax
call _free
mov eax, 0
leave 
retn 
main endp

0 2
1 2
2 1
2 3
postorder [3, 1, 2, 0]
3:nothing, singular block
1:nothing, singular block
2:while-loop
4:block
appendable to 3 False
5:nothing, singular block
0:block
appendable to 5 True
5:nothing, singular block
id: 5 type: block starts at 0:
    |-- nodes:
    |   id: 0 type: low-level
    |   id: 4 type: while-loop starts at 2:
    |       body:2 condition:2 
    |       |-- nodes:
    |       |   id: 2 type: low-level
    |       |   id: 1 type: low-level
    |       |-- edges:
    |       |       1 2
    |       |       2 1
    |   id: 3 type: low-level
    |-- edges:
    |       4 3
    |       0 4
